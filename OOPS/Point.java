import java.util.*;

/**
 * _1_Test
 */
// imp      Comparing Objects
public class Point {
    // this needs to be private but for now we will keep it public for the sake of error
    int x;
    int y;

    public Point(int x, int y) { // constructor
        this.x = x;
        this.y = y;
    }

    // to generate automate equals and hashcode method
    // comment all methods and main function
    // then press Ctrl + . and select generate equals and hashcode
    // then u will get automatically generated equals and hashcode method same as below but with different variable names ( maybe )

    // imp      automatically generated by vscode , equals and hashcode method
    //    @Override
    //    public int hashCode() {
    //        return Objects.hash(x, y);
    //    }
    //
    //    @Override
    //    public boolean equals(Object obj) {
    //        if (this == obj)
    //            return true;
    //        if (obj == null)
    //            return false;
    //        if (getClass() != obj.getClass())
    //            return false;
    //        Point other = (Point) obj;
    //        if (x != other.x)
    //            return false;
    //        if (y != other.y)
    //            return false;
    //        return true;
    //    }

    public static void main(String[] args) {
        var point1 = new Point(1, 2);
        var point2 = new Point(1, 2);

        //System.out.println(point1 == point2);
        // becoz both the points are referring to different objects
        // or u can write
        System.out.println(point1.equals(point2));

        // fix     but here is a problem 
        // anyone can inherit the point class and override the equals method

        // error :   showing error hence commenting it out
        //System.out.println("For Car " + point1.equals(new Car()));

        // Q       its wrong right ?

        System.out.println(point1.hashCode());
        System.out.println(point2.hashCode());

        // fix     so we need to make sure that the object we are comparing is of the same type
        // we can do this by using the getClass method

        // ->        refer line 73 or 81
    }

    // we need to override the equals method and the hashcode method
    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        /*            if (obj instanceof Point) {
                    var other = (Point) obj;
                    return other.x == x && other.y == y;
        
                }*/
        // we can also write this in reverse order like
        if (!(obj instanceof Point))
            return false;
        var other = (Point) obj;
        return other.x == x && other.y == y;
    }

    @Override
    public int hashCode() {
        return Objects.hash(x, y);
    }
}